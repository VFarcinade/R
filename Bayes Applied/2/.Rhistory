rm(list=ls())
golf = read.csv("golf2.txt")
# Question 1
tsd = table(golf$success, golf$distance)
n = colSums(tsd)
prop = tsd[2, ] / n
plot(2:20, prop, ylim=c(0,1)) # success probability
# with error bars...
for(i in 1:19){
lines(c(i+1,i+1), c(prop[i] - 2*sqrt(prop[i] * (1-prop[i]) / n[i]),
prop[i] + 2*sqrt(prop[i] * (1-prop[i]) / n[i])),
col=gray(.5))
}
# Question 4
# install.packages("MCMCpack")
library(MCMCpack)
m1 = MCMClogit(success ~ distance, data=golf, b0 = 0, B0 = 3)
summary(m1)
plot(m1)
raftery.diag(m1)
summary(glm(success ~ distance, data=golf, family="binomial"))
plot(2:20, prop)
beta0 = mean(m1[,1])
beta1 = mean(m1[, 2])
curve(exp(beta0+beta1*x)/(1+exp(beta0+beta1*x)), add=T, col=2)
# plot several curves from the posterior
nsamp = 100
iter = sample(nrow(m1), 10)
for(i in iter){
beta0 = m1[i, 1]
beta1 = m1[i, 2]
curve(exp(beta0+beta1*x)/(1+exp(beta0+beta1*x)), add=T, col="gray")
}
# Repeat this but by coding the lkd, and using a generic MH function
logpost_glm = function(beta, d=golf){
y = d$success
x = d$distance
p = exp(beta[1] + x*beta[2]) / (1+ exp(beta[1] + x*beta[2]))
llkd = sum(y * log(p) + (1-y) * log(1-p))
logprior = 0
if(is.na(llkd + logprior)) return(-Inf)
return(llkd + logprior)
}
mh_glm = MCMCmetrop1R(logpost_glm, c(0,0), burnin = 1)
summary(mh_glm)
plot(mh_glm)
raftery.diag(mh_glm)
mh_glm2 = window(mh_glm, start = 100) # remove 100 iterations as burn-in
plot(mh_glm2)
mh_glm = MCMCmetrop1R(logpost_glm, c(0,0), burnin = 1)
summary(mh_glm)
raftery.diag(mh_glm)
mh_glm2 = window(mh_glm, start = 100) # remove 100 iterations as burn-in
plot(mh_glm2)
# Part 2
rball = .07
rhole = .177
prob_mod2 = function(sigma, x) 2*pnorm(1/sigma * atan((rhole)/x)) -1
logprior_mod2 = function(sigma) 2* dnorm(sigma, 1, log=T)
logpost_mod2 = function(sigma, d = golf){
if(sigma<=0) return(-Inf)
p = prob_mod2(sigma, d$distance)
y = d$success
llkd = sum(y * log(p) + (1-y) * log(1-p))
logprior = logprior_mod2(sigma)
if(is.na(llkd + logprior)) return(-Inf)
return(llkd + logprior)
}
mh0 = MCMCmetrop1R(logpost_mod2, 1, burnin = 1)
summary(mh0)
plot(window(mh0, start=5000))
# change the initial value of the MH
mh0b = MCMCmetrop1R(logpost_mod2, 2, burnin=1)
plot(mh0b)
# change the tuning parameter
mh1 = MCMCmetrop1R(logpost_mod2, .1, tune=.5, burnin=8000, mcmc=1000)
mh2 = MCMCmetrop1R(logpost_mod2, 1, tune=4, burnin=3000, mcmc=5000)
mh3 = MCMCmetrop1R(logpost_mod2, 1, tune=25, burnin=3000, mcmc=1000)
summary(mh2)
plot(mh3)
plot(mh2)
plot(mh1)
par(mfrow=c(1,1))
plot(2:20, prop)
beta0 = mean(m1[,1])
beta1 = mean(m1[, 2])
sigma = mean(mh2)
curve(exp(beta0+beta1*x)/(1+exp(beta0+beta1*x)), add=T, col=2)
curve(prob_mod2(sigma, x), add=T, col=4)
par(mfrow=c(1,1))
plot(2:20, prop)
beta0 = mean(m1[,1])
beta1 = mean(m1[, 2])
sigma = mean(mh2)
curve(exp(beta0+beta1*x)/(1+exp(beta0+beta1*x)), add=T, col=2)
curve(prob_mod2(sigma, x), add=T, col=4)
pred_glm = exp(beta0+beta1*2:20)/(1+exp(beta0+beta1*2:20))
mean((pred_glm - prop)^2)
pred_mod2 = prob_mod2(sigma, 2:20)
mean((pred_mod2 - prop)^2)
print(2:20)
print(seq(2:20))
print(seq(2,20))
print(2:20:3))
print(2:20:3)
print(2:20:2)
print(2:20:1)
print(seq(2,20,1))
print(seq(2,20,2))
