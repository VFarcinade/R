rm(list=ls())
# f = file.choose()
# deputes = read.csv2(f)
deputes=read.csv2('deputes2019.csv')
attach(deputes)
#Q1
#Data exploration
summary(questions_orales)
hist(questions_orales, breaks=(0:16-.5))
(n = length(questions_orales))
(nh = sum(sexe=="H"))
(nf = sum(sexe=="F"))
(qtot = sum(questions_orales))
(qh = sum(questions_orales[sexe=="H"]))
(qf = sum(questions_orales[sexe=="F"]))
#Is the Poisson model suitable?
lambdahat = qtot/n # MLE
table(questions_orales) # observed counts
round(n*dpois(0:15, lambdahat)) #expected counts
chisq.test(table(factor(questions_orales, levels=0:5)), round(n*dpois(0:5, lambdahat))) # large p-value: accept H0 that the data come from a Poisson
hist(questions_orales, prob=T, breaks=0:16-.5)
points(0:15, dpois(0:15, lambdahat), col=2)
#Q5
#For a prior Gamma(2, 2)
a = 2
b = 2
par(mfrow=c(3, 1))
curve(dgamma(x, a, b), xlim=c(0, 5), main="Prior", ylab="density")
curve(dgamma(x, a+qtot, b+n), xlim=c(0, 5), main="Posterior model 1", ylab="density")
curve(dgamma(x, a+qh, b+nh), xlim=c(0, 5), main= "Posterior model 2", ylab="density")
curve(dgamma(x, a+qf, b+nf), col=2, add=T)
legend("topright", c("H", "F"), col=1:2, lty=1)
# Q6: credibility intervals
qgamma(c(.025, .975), a, b) # prior
qgamma(c(.025, .975), a+qtot, b+n) # model 1
qgamma(c(.025, .975), a+qh, b+nh) # model 2: lambda1
qgamma(c(.025, .975), a+qf, b+nf) # model 2: lambda2
rm(list=ls())
d = read.csv("deathrate2.csv")[, -1]
setwd("C:/Users/Vfarc/Desktop/M2.2/Mash/S2/Bayes applied/3")
rm(list=ls())
d = read.csv("deathrate2.csv")[, -1]
y = d[ , 1]
X = as.matrix(d[ , -1])
n = length(y)
p = ncol(X)
library(corrplot)
rm(list=ls())
d = read.csv("deathrate2.csv")[, -1]
y = d[ , 1]
X = as.matrix(d[ , -1])
n = length(y)
p = ncol(X)
library(corrplot)
corrplot(cor(d))
#Q1
reg.f = lm(deathrate ~ ., data=d)
summary(reg.f)
reg.f.aic = step(reg.f)
summary(reg.f.aic)
betahat = reg.f$coefficients #MLE for beta
residuals = reg.f$residuals
s2 = summary(reg.f)$sigma^2 # MLE for sigma^2
X = cbind(1, X) # add a column of 1s for the intercept
#Q4
# install.packages("BMS")
library(BMS)
reg = bms(d, burn=1e4, iter=5e4)
coef(reg)
image(reg)
topmodels.bma(reg)[, 1:5]
y = c(28, 8, -3, 7, -1, 1, 18, 12)
s = c(15, 10, 16, 11, 9, 11, 10, 18)
n = length(y)
theta.out = out$batch[, 1:8]
y = c(28, 8, -3, 7, -1, 1, 18, 12)
s = c(15, 10, 16, 11, 9, 11, 10, 18)
n = length(y)
# Q2
# constant prior on the mean
# plot the posterior for each theta_i
curve(dnorm(x, y[1], s[1]),
xlim=c(-50, 80), ylim = c(0, .1))
for(i in 2:8){
curve(dnorm(x, y[i], s[i]), add=T, col=i)
}
# Q3
# With a constant prior on the mean, the posterior is normal N(a, b^2) with
b = sqrt(1 / sum(1 / s ^ 2))
a = b^2 * sum(y / s ^ 2)
curve(dnorm(x, a, b), add=T, lty=2)
curve(dnorm(x, a, b), xlim=c(-5, 30), lty=2)
niter = 1e4
r = rep(NA, niter)
mu = rep(NA, niter)
library(MCMCpack)
out = MCMCmetrop1R(logpost2, c(rep(0, 8),0, 10), mcmc=2e5, burnin=1e3,tune=1)
